// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaChassisStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACHASSISSTATUS_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACHASSISSTATUS_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLACHASSISSTATUS_SOURCE)
#define CARLACHASSISSTATUS_DllAPI __declspec( dllexport )
#else
#define CARLACHASSISSTATUS_DllAPI __declspec( dllimport )
#endif // CARLACHASSISSTATUS_SOURCE
#else
#define CARLACHASSISSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLACHASSISSTATUS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace carla_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure CarlaChassisStatus defined by the user in the IDL file.
         * @ingroup CarlaChassisStatus
         */
        class CarlaChassisStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CarlaChassisStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CarlaChassisStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaChassisStatus that will be copied.
             */
            eProsima_user_DllExport CarlaChassisStatus(
                    const CarlaChassisStatus& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaChassisStatus that will be copied.
             */
            eProsima_user_DllExport CarlaChassisStatus(
                    CarlaChassisStatus&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaChassisStatus that will be copied.
             */
            eProsima_user_DllExport CarlaChassisStatus& operator =(
                    const CarlaChassisStatus& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaChassisStatus that will be copied.
             */
            eProsima_user_DllExport CarlaChassisStatus& operator =(
                    CarlaChassisStatus&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaChassisStatus object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CarlaChassisStatus& x) const;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaChassisStatus object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CarlaChassisStatus& x) const;

            /*!
             * @brief This function sets a value in member engine_started
             * @param _engine_started New value for member engine_started
             */
            eProsima_user_DllExport void engine_started(
                    bool _engine_started);

            /*!
             * @brief This function returns the value of member engine_started
             * @return Value of member engine_started
             */
            eProsima_user_DllExport bool engine_started() const;

            /*!
             * @brief This function returns a reference to member engine_started
             * @return Reference to member engine_started
             */
            eProsima_user_DllExport bool& engine_started();

            /*!
             * @brief This function sets a value in member engine_rpm
             * @param _engine_rpm New value for member engine_rpm
             */
            eProsima_user_DllExport void engine_rpm(
                    float _engine_rpm);

            /*!
             * @brief This function returns the value of member engine_rpm
             * @return Value of member engine_rpm
             */
            eProsima_user_DllExport float engine_rpm() const;

            /*!
             * @brief This function returns a reference to member engine_rpm
             * @return Reference to member engine_rpm
             */
            eProsima_user_DllExport float& engine_rpm();

            /*!
             * @brief This function sets a value in member speed_mps
             * @param _speed_mps New value for member speed_mps
             */
            eProsima_user_DllExport void speed_mps(
                    float _speed_mps);

            /*!
             * @brief This function returns the value of member speed_mps
             * @return Value of member speed_mps
             */
            eProsima_user_DllExport float speed_mps() const;

            /*!
             * @brief This function returns a reference to member speed_mps
             * @return Reference to member speed_mps
             */
            eProsima_user_DllExport float& speed_mps();

            /*!
             * @brief This function sets a value in member throttle_percentage
             * @param _throttle_percentage New value for member throttle_percentage
             */
            eProsima_user_DllExport void throttle_percentage(
                    float _throttle_percentage);

            /*!
             * @brief This function returns the value of member throttle_percentage
             * @return Value of member throttle_percentage
             */
            eProsima_user_DllExport float throttle_percentage() const;

            /*!
             * @brief This function returns a reference to member throttle_percentage
             * @return Reference to member throttle_percentage
             */
            eProsima_user_DllExport float& throttle_percentage();

            /*!
             * @brief This function sets a value in member brake_percentage
             * @param _brake_percentage New value for member brake_percentage
             */
            eProsima_user_DllExport void brake_percentage(
                    float _brake_percentage);

            /*!
             * @brief This function returns the value of member brake_percentage
             * @return Value of member brake_percentage
             */
            eProsima_user_DllExport float brake_percentage() const;

            /*!
             * @brief This function returns a reference to member brake_percentage
             * @return Reference to member brake_percentage
             */
            eProsima_user_DllExport float& brake_percentage();

            /*!
             * @brief This function sets a value in member steering_percentage
             * @param _steering_percentage New value for member steering_percentage
             */
            eProsima_user_DllExport void steering_percentage(
                    float _steering_percentage);

            /*!
             * @brief This function returns the value of member steering_percentage
             * @return Value of member steering_percentage
             */
            eProsima_user_DllExport float steering_percentage() const;

            /*!
             * @brief This function returns a reference to member steering_percentage
             * @return Reference to member steering_percentage
             */
            eProsima_user_DllExport float& steering_percentage();


            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_msgs::msg::CarlaChassisStatus& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_engine_started;
            float m_engine_rpm;
            float m_speed_mps;
            float m_throttle_percentage;
            float m_brake_percentage;
            float m_steering_percentage;

        };
    } // namespace msg
} // namespace carla_msgs

#endif // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACHASSISSTATUS_H_


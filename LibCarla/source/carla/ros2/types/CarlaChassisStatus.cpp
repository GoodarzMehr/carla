// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaChassisStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaChassisStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define carla_msgs_msg_CarlaChassisStatus_max_cdr_typesize 24ULL;
#define carla_msgs_msg_CarlaChassisStatus_max_key_cdr_typesize 0ULL;

carla_msgs::msg::CarlaChassisStatus::CarlaChassisStatus()
{
    // boolean m_engine_started
    m_engine_started = false;
    // float m_engine_rpm
    m_engine_rpm = 0.0;
    // float m_speed_mps
    m_speed_mps = 0.0;
    // float m_throttle_percentage
    m_throttle_percentage = 0.0;
    // float m_brake_percentage
    m_brake_percentage = 0.0;
    // float m_steering_percentage
    m_steering_percentage = 0.0;

}

carla_msgs::msg::CarlaChassisStatus::~CarlaChassisStatus()
{






}

carla_msgs::msg::CarlaChassisStatus::CarlaChassisStatus(
        const CarlaChassisStatus& x)
{
    m_engine_started = x.m_engine_started;
    m_engine_rpm = x.m_engine_rpm;
    m_speed_mps = x.m_speed_mps;
    m_throttle_percentage = x.m_throttle_percentage;
    m_brake_percentage = x.m_brake_percentage;
    m_steering_percentage = x.m_steering_percentage;
}

carla_msgs::msg::CarlaChassisStatus::CarlaChassisStatus(
        CarlaChassisStatus&& x) noexcept 
{
    m_engine_started = x.m_engine_started;
    m_engine_rpm = x.m_engine_rpm;
    m_speed_mps = x.m_speed_mps;
    m_throttle_percentage = x.m_throttle_percentage;
    m_brake_percentage = x.m_brake_percentage;
    m_steering_percentage = x.m_steering_percentage;
}

carla_msgs::msg::CarlaChassisStatus& carla_msgs::msg::CarlaChassisStatus::operator =(
        const CarlaChassisStatus& x)
{

    m_engine_started = x.m_engine_started;
    m_engine_rpm = x.m_engine_rpm;
    m_speed_mps = x.m_speed_mps;
    m_throttle_percentage = x.m_throttle_percentage;
    m_brake_percentage = x.m_brake_percentage;
    m_steering_percentage = x.m_steering_percentage;

    return *this;
}

carla_msgs::msg::CarlaChassisStatus& carla_msgs::msg::CarlaChassisStatus::operator =(
        CarlaChassisStatus&& x) noexcept
{

    m_engine_started = x.m_engine_started;
    m_engine_rpm = x.m_engine_rpm;
    m_speed_mps = x.m_speed_mps;
    m_throttle_percentage = x.m_throttle_percentage;
    m_brake_percentage = x.m_brake_percentage;
    m_steering_percentage = x.m_steering_percentage;

    return *this;
}

bool carla_msgs::msg::CarlaChassisStatus::operator ==(
        const CarlaChassisStatus& x) const
{

    return (m_engine_started == x.m_engine_started && m_engine_rpm == x.m_engine_rpm && m_speed_mps == x.m_speed_mps && m_throttle_percentage == x.m_throttle_percentage && m_brake_percentage == x.m_brake_percentage && m_steering_percentage == x.m_steering_percentage);
}

bool carla_msgs::msg::CarlaChassisStatus::operator !=(
        const CarlaChassisStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaChassisStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaChassisStatus_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaChassisStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaChassisStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaChassisStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_engine_started;
    scdr << m_engine_rpm;
    scdr << m_speed_mps;
    scdr << m_throttle_percentage;
    scdr << m_brake_percentage;
    scdr << m_steering_percentage;

}

void carla_msgs::msg::CarlaChassisStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_engine_started;
    dcdr >> m_engine_rpm;
    dcdr >> m_speed_mps;
    dcdr >> m_throttle_percentage;
    dcdr >> m_brake_percentage;
    dcdr >> m_steering_percentage;
}

/*!
 * @brief This function sets a value in member engine_started
 * @param _engine_started New value for member engine_started
 */
void carla_msgs::msg::CarlaChassisStatus::engine_started(
        bool _engine_started)
{
    m_engine_started = _engine_started;
}

/*!
 * @brief This function returns the value of member engine_started
 * @return Value of member engine_started
 */
bool carla_msgs::msg::CarlaChassisStatus::engine_started() const
{
    return m_engine_started;
}

/*!
 * @brief This function returns a reference to member engine_started
 * @return Reference to member engine_started
 */
bool& carla_msgs::msg::CarlaChassisStatus::engine_started()
{
    return m_engine_started;
}

/*!
 * @brief This function sets a value in member engine_rpm
 * @param _engine_rpm New value for member engine_rpm
 */
void carla_msgs::msg::CarlaChassisStatus::engine_rpm(
        float _engine_rpm)
{
    m_engine_rpm = _engine_rpm;
}

/*!
 * @brief This function returns the value of member engine_rpm
 * @return Value of member engine_rpm
 */
float carla_msgs::msg::CarlaChassisStatus::engine_rpm() const
{
    return m_engine_rpm;
}

/*!
 * @brief This function returns a reference to member engine_rpm
 * @return Reference to member engine_rpm
 */
float& carla_msgs::msg::CarlaChassisStatus::engine_rpm()
{
    return m_engine_rpm;
}

/*!
 * @brief This function sets a value in member speed_mps
 * @param _speed_mps New value for member speed_mps
 */
void carla_msgs::msg::CarlaChassisStatus::speed_mps(
        float _speed_mps)
{
    m_speed_mps = _speed_mps;
}

/*!
 * @brief This function returns the value of member speed_mps
 * @return Value of member speed_mps
 */
float carla_msgs::msg::CarlaChassisStatus::speed_mps() const
{
    return m_speed_mps;
}

/*!
 * @brief This function returns a reference to member speed_mps
 * @return Reference to member speed_mps
 */
float& carla_msgs::msg::CarlaChassisStatus::speed_mps()
{
    return m_speed_mps;
}

/*!
 * @brief This function sets a value in member throttle_percentage
 * @param _throttle_percentage New value for member throttle_percentage
 */
void carla_msgs::msg::CarlaChassisStatus::throttle_percentage(
        float _throttle_percentage)
{
    m_throttle_percentage = _throttle_percentage;
}

/*!
 * @brief This function returns the value of member throttle_percentage
 * @return Value of member throttle_percentage
 */
float carla_msgs::msg::CarlaChassisStatus::throttle_percentage() const
{
    return m_throttle_percentage;
}

/*!
 * @brief This function returns a reference to member throttle_percentage
 * @return Reference to member throttle_percentage
 */
float& carla_msgs::msg::CarlaChassisStatus::throttle_percentage()
{
    return m_throttle_percentage;
}

/*!
 * @brief This function sets a value in member brake_percentage
 * @param _brake_percentage New value for member brake_percentage
 */
void carla_msgs::msg::CarlaChassisStatus::brake_percentage(
        float _brake_percentage)
{
    m_brake_percentage = _brake_percentage;
}

/*!
 * @brief This function returns the value of member brake_percentage
 * @return Value of member brake_percentage
 */
float carla_msgs::msg::CarlaChassisStatus::brake_percentage() const
{
    return m_brake_percentage;
}

/*!
 * @brief This function returns a reference to member brake_percentage
 * @return Reference to member brake_percentage
 */
float& carla_msgs::msg::CarlaChassisStatus::brake_percentage()
{
    return m_brake_percentage;
}

/*!
 * @brief This function sets a value in member steering_percentage
 * @param _steering_percentage New value for member steering_percentage
 */
void carla_msgs::msg::CarlaChassisStatus::steering_percentage(
        float _steering_percentage)
{
    m_steering_percentage = _steering_percentage;
}

/*!
 * @brief This function returns the value of member steering_percentage
 * @return Value of member steering_percentage
 */
float carla_msgs::msg::CarlaChassisStatus::steering_percentage() const
{
    return m_steering_percentage;
}

/*!
 * @brief This function returns a reference to member steering_percentage
 * @return Reference to member steering_percentage
 */
float& carla_msgs::msg::CarlaChassisStatus::steering_percentage()
{
    return m_steering_percentage;
}



size_t carla_msgs::msg::CarlaChassisStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaChassisStatus_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaChassisStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaChassisStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}




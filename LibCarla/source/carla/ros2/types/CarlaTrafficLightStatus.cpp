// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define carla_msgs_msg_CarlaTrafficLightStatus_max_cdr_typesize 281ULL;
#define carla_msgs_msg_CarlaTrafficLightStatus_max_key_cdr_typesize 0ULL;







carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus()
{
    // string m_id
    m_id ="";
    // uint8 m_color
    m_color = 0;
    // double m_confidence
    m_confidence = 0.0;
    // double m_tracking_time
    m_tracking_time = 0.0;
    // boolean m_blink
    m_blink = false;

}

carla_msgs::msg::CarlaTrafficLightStatus::~CarlaTrafficLightStatus()
{





}

carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus(
        const CarlaTrafficLightStatus& x)
{
    m_id = x.m_id;
    m_color = x.m_color;
    m_confidence = x.m_confidence;
    m_tracking_time = x.m_tracking_time;
    m_blink = x.m_blink;
}

carla_msgs::msg::CarlaTrafficLightStatus::CarlaTrafficLightStatus(
        CarlaTrafficLightStatus&& x) noexcept 
{
    m_id = std::move(x.m_id);
    m_color = x.m_color;
    m_confidence = x.m_confidence;
    m_tracking_time = x.m_tracking_time;
    m_blink = x.m_blink;
}

carla_msgs::msg::CarlaTrafficLightStatus& carla_msgs::msg::CarlaTrafficLightStatus::operator =(
        const CarlaTrafficLightStatus& x)
{

    m_id = x.m_id;
    m_color = x.m_color;
    m_confidence = x.m_confidence;
    m_tracking_time = x.m_tracking_time;
    m_blink = x.m_blink;

    return *this;
}

carla_msgs::msg::CarlaTrafficLightStatus& carla_msgs::msg::CarlaTrafficLightStatus::operator =(
        CarlaTrafficLightStatus&& x) noexcept
{

    m_id = std::move(x.m_id);
    m_color = x.m_color;
    m_confidence = x.m_confidence;
    m_tracking_time = x.m_tracking_time;
    m_blink = x.m_blink;

    return *this;
}

bool carla_msgs::msg::CarlaTrafficLightStatus::operator ==(
        const CarlaTrafficLightStatus& x) const
{

    return (m_id == x.m_id && m_color == x.m_color && m_confidence == x.m_confidence && m_tracking_time == x.m_tracking_time && m_blink == x.m_blink);
}

bool carla_msgs::msg::CarlaTrafficLightStatus::operator !=(
        const CarlaTrafficLightStatus& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaTrafficLightStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaTrafficLightStatus_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaTrafficLightStatus::getCdrSerializedSize(
        const carla_msgs::msg::CarlaTrafficLightStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.id().size() + 1;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaTrafficLightStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id.c_str();
    scdr << m_color;
    scdr << m_confidence;
    scdr << m_tracking_time;
    scdr << m_blink;

}

void carla_msgs::msg::CarlaTrafficLightStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_color;
    dcdr >> m_confidence;
    dcdr >> m_tracking_time;
    dcdr >> m_blink;
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void carla_msgs::msg::CarlaTrafficLightStatus::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void carla_msgs::msg::CarlaTrafficLightStatus::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& carla_msgs::msg::CarlaTrafficLightStatus::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& carla_msgs::msg::CarlaTrafficLightStatus::id()
{
    return m_id;
}
/*!
 * @brief This function sets a value in member color
 * @param _color New value for member color
 */
void carla_msgs::msg::CarlaTrafficLightStatus::color(
        uint8_t _color)
{
    m_color = _color;
}

/*!
 * @brief This function returns the value of member color
 * @return Value of member color
 */
uint8_t carla_msgs::msg::CarlaTrafficLightStatus::color() const
{
    return m_color;
}

/*!
 * @brief This function returns a reference to member color
 * @return Reference to member color
 */
uint8_t& carla_msgs::msg::CarlaTrafficLightStatus::color()
{
    return m_color;
}

/*!
 * @brief This function sets a value in member confidence
 * @param _confidence New value for member confidence
 */
void carla_msgs::msg::CarlaTrafficLightStatus::confidence(
        double _confidence)
{
    m_confidence = _confidence;
}

/*!
 * @brief This function returns the value of member confidence
 * @return Value of member confidence
 */
double carla_msgs::msg::CarlaTrafficLightStatus::confidence() const
{
    return m_confidence;
}

/*!
 * @brief This function returns a reference to member confidence
 * @return Reference to member confidence
 */
double& carla_msgs::msg::CarlaTrafficLightStatus::confidence()
{
    return m_confidence;
}

/*!
 * @brief This function sets a value in member tracking_time
 * @param _tracking_time New value for member tracking_time
 */
void carla_msgs::msg::CarlaTrafficLightStatus::tracking_time(
        double _tracking_time)
{
    m_tracking_time = _tracking_time;
}

/*!
 * @brief This function returns the value of member tracking_time
 * @return Value of member tracking_time
 */
double carla_msgs::msg::CarlaTrafficLightStatus::tracking_time() const
{
    return m_tracking_time;
}

/*!
 * @brief This function returns a reference to member tracking_time
 * @return Reference to member tracking_time
 */
double& carla_msgs::msg::CarlaTrafficLightStatus::tracking_time()
{
    return m_tracking_time;
}

/*!
 * @brief This function sets a value in member blink
 * @param _blink New value for member blink
 */
void carla_msgs::msg::CarlaTrafficLightStatus::blink(
        bool _blink)
{
    m_blink = _blink;
}

/*!
 * @brief This function returns the value of member blink
 * @return Value of member blink
 */
bool carla_msgs::msg::CarlaTrafficLightStatus::blink() const
{
    return m_blink;
}

/*!
 * @brief This function returns a reference to member blink
 * @return Reference to member blink
 */
bool& carla_msgs::msg::CarlaTrafficLightStatus::blink()
{
    return m_blink;
}



size_t carla_msgs::msg::CarlaTrafficLightStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaTrafficLightStatus_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaTrafficLightStatus::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaTrafficLightStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}




// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaPerceptionObstacleArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaPerceptionObstacleArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define carla_msgs_msg_CarlaPerceptionObstacle_max_cdr_typesize 2568ULL;
#define carla_msgs_msg_CarlaPerceptionObstacleArray_max_cdr_typesize 257072ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaPerceptionObstacle_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaPerceptionObstacleArray_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

carla_msgs::msg::CarlaPerceptionObstacleArray::CarlaPerceptionObstacleArray()
{
    // std_msgs::msg::Header m_header

    // sequence<carla_msgs::msg::CarlaPerceptionObstacle> m_obstacle


}

carla_msgs::msg::CarlaPerceptionObstacleArray::~CarlaPerceptionObstacleArray()
{


}

carla_msgs::msg::CarlaPerceptionObstacleArray::CarlaPerceptionObstacleArray(
        const CarlaPerceptionObstacleArray& x)
{
    m_header = x.m_header;
    m_obstacle = x.m_obstacle;
}

carla_msgs::msg::CarlaPerceptionObstacleArray::CarlaPerceptionObstacleArray(
        CarlaPerceptionObstacleArray&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_obstacle = std::move(x.m_obstacle);
}

carla_msgs::msg::CarlaPerceptionObstacleArray& carla_msgs::msg::CarlaPerceptionObstacleArray::operator =(
        const CarlaPerceptionObstacleArray& x)
{

    m_header = x.m_header;
    m_obstacle = x.m_obstacle;

    return *this;
}

carla_msgs::msg::CarlaPerceptionObstacleArray& carla_msgs::msg::CarlaPerceptionObstacleArray::operator =(
        CarlaPerceptionObstacleArray&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_obstacle = std::move(x.m_obstacle);

    return *this;
}

bool carla_msgs::msg::CarlaPerceptionObstacleArray::operator ==(
        const CarlaPerceptionObstacleArray& x) const
{

    return (m_header == x.m_header && m_obstacle == x.m_obstacle);
}

bool carla_msgs::msg::CarlaPerceptionObstacleArray::operator !=(
        const CarlaPerceptionObstacleArray& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaPerceptionObstacleArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaPerceptionObstacleArray_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaPerceptionObstacleArray::getCdrSerializedSize(
        const carla_msgs::msg::CarlaPerceptionObstacleArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.obstacle().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaPerceptionObstacle::getCdrSerializedSize(data.obstacle().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaPerceptionObstacleArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_obstacle;

}

void carla_msgs::msg::CarlaPerceptionObstacleArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_obstacle;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaPerceptionObstacleArray::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaPerceptionObstacleArray::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaPerceptionObstacleArray::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaPerceptionObstacleArray::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member obstacle
 * @param _obstacle New value to be copied in member obstacle
 */
void carla_msgs::msg::CarlaPerceptionObstacleArray::obstacle(
        const std::vector<carla_msgs::msg::CarlaPerceptionObstacle>& _obstacle)
{
    m_obstacle = _obstacle;
}

/*!
 * @brief This function moves the value in member obstacle
 * @param _obstacle New value to be moved in member obstacle
 */
void carla_msgs::msg::CarlaPerceptionObstacleArray::obstacle(
        std::vector<carla_msgs::msg::CarlaPerceptionObstacle>&& _obstacle)
{
    m_obstacle = std::move(_obstacle);
}

/*!
 * @brief This function returns a constant reference to member obstacle
 * @return Constant reference to member obstacle
 */
const std::vector<carla_msgs::msg::CarlaPerceptionObstacle>& carla_msgs::msg::CarlaPerceptionObstacleArray::obstacle() const
{
    return m_obstacle;
}

/*!
 * @brief This function returns a reference to member obstacle
 * @return Reference to member obstacle
 */
std::vector<carla_msgs::msg::CarlaPerceptionObstacle>& carla_msgs::msg::CarlaPerceptionObstacleArray::obstacle()
{
    return m_obstacle;
}


size_t carla_msgs::msg::CarlaPerceptionObstacleArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaPerceptionObstacleArray_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaPerceptionObstacleArray::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaPerceptionObstacleArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}




// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaPerceptionObstacle.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAPERCEPTIONOBSTACLE_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAPERCEPTIONOBSTACLE_H_

#include "Vector3.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CARLAPERCEPTIONOBSTACLE_SOURCE)
#define CARLAPERCEPTIONOBSTACLE_DllAPI __declspec( dllexport )
#else
#define CARLAPERCEPTIONOBSTACLE_DllAPI __declspec( dllimport )
#endif // CARLAPERCEPTIONOBSTACLE_SOURCE
#else
#define CARLAPERCEPTIONOBSTACLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CARLAPERCEPTIONOBSTACLE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace carla_msgs {
    namespace msg {
        namespace CarlaPerceptionObstacle_Constants {
            const uint8_t UNKNOWN = 0;
            const uint8_t UNKNOWN_MOVABLE = 1;
            const uint8_t UNKNOWN_UNMOVABLE = 2;
            const uint8_t PEDESTRIAN = 3;
            const uint8_t BICYCLE = 4;
            const uint8_t VEHICLE = 5;
            const uint8_t ST_UNKNOWN = 0;
            const uint8_t ST_UNKNOWN_MOVABLE = 1;
            const uint8_t ST_UNKNOWN_UNMOVABLE = 2;
            const uint8_t ST_CAR = 3;
            const uint8_t ST_VAN = 4;
            const uint8_t ST_TRUCK = 5;
            const uint8_t ST_BUS = 6;
            const uint8_t ST_CYCLIST = 7;
            const uint8_t ST_MOTORCYCLIST = 8;
            const uint8_t ST_TRICYCLIST = 9;
            const uint8_t ST_PEDESTRIAN = 10;
            const uint8_t ST_TRAFFICCONE = 11;
            const uint8_t ST_SMALLMOT = 12;
            const uint8_t ST_BIGMOT = 13;
            const uint8_t ST_NONMOT = 14;
        } // namespace CarlaPerceptionObstacle_Constants
        /*!
         * @brief This class represents the structure CarlaPerceptionObstacle defined by the user in the IDL file.
         * @ingroup CarlaPerceptionObstacle
         */
        class CarlaPerceptionObstacle
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport CarlaPerceptionObstacle();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~CarlaPerceptionObstacle();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaPerceptionObstacle that will be copied.
             */
            eProsima_user_DllExport CarlaPerceptionObstacle(
                    const CarlaPerceptionObstacle& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object carla_msgs::msg::CarlaPerceptionObstacle that will be copied.
             */
            eProsima_user_DllExport CarlaPerceptionObstacle(
                    CarlaPerceptionObstacle&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaPerceptionObstacle that will be copied.
             */
            eProsima_user_DllExport CarlaPerceptionObstacle& operator =(
                    const CarlaPerceptionObstacle& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object carla_msgs::msg::CarlaPerceptionObstacle that will be copied.
             */
            eProsima_user_DllExport CarlaPerceptionObstacle& operator =(
                    CarlaPerceptionObstacle&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaPerceptionObstacle object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const CarlaPerceptionObstacle& x) const;

            /*!
             * @brief Comparison operator.
             * @param x carla_msgs::msg::CarlaPerceptionObstacle object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const CarlaPerceptionObstacle& x) const;

            /*!
             * @brief This function sets a value in member id
             * @param _id New value for member id
             */
            eProsima_user_DllExport void id(
                    int32_t _id);

            /*!
             * @brief This function returns the value of member id
             * @return Value of member id
             */
            eProsima_user_DllExport int32_t id() const;

            /*!
             * @brief This function returns a reference to member id
             * @return Reference to member id
             */
            eProsima_user_DllExport int32_t& id();

            /*!
             * @brief This function copies the value in member position
             * @param _position New value to be copied in member position
             */
            eProsima_user_DllExport void position(
                    const geometry_msgs::msg::Vector3& _position);

            /*!
             * @brief This function moves the value in member position
             * @param _position New value to be moved in member position
             */
            eProsima_user_DllExport void position(
                    geometry_msgs::msg::Vector3&& _position);

            /*!
             * @brief This function returns a constant reference to member position
             * @return Constant reference to member position
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& position() const;

            /*!
             * @brief This function returns a reference to member position
             * @return Reference to member position
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& position();
            /*!
             * @brief This function sets a value in member yaw
             * @param _yaw New value for member yaw
             */
            eProsima_user_DllExport void yaw(
                    double _yaw);

            /*!
             * @brief This function returns the value of member yaw
             * @return Value of member yaw
             */
            eProsima_user_DllExport double yaw() const;

            /*!
             * @brief This function returns a reference to member yaw
             * @return Reference to member yaw
             */
            eProsima_user_DllExport double& yaw();

            /*!
             * @brief This function copies the value in member velocity
             * @param _velocity New value to be copied in member velocity
             */
            eProsima_user_DllExport void velocity(
                    const geometry_msgs::msg::Vector3& _velocity);

            /*!
             * @brief This function moves the value in member velocity
             * @param _velocity New value to be moved in member velocity
             */
            eProsima_user_DllExport void velocity(
                    geometry_msgs::msg::Vector3&& _velocity);

            /*!
             * @brief This function returns a constant reference to member velocity
             * @return Constant reference to member velocity
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& velocity() const;

            /*!
             * @brief This function returns a reference to member velocity
             * @return Reference to member velocity
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& velocity();
            /*!
             * @brief This function sets a value in member length
             * @param _length New value for member length
             */
            eProsima_user_DllExport void length(
                    double _length);

            /*!
             * @brief This function returns the value of member length
             * @return Value of member length
             */
            eProsima_user_DllExport double length() const;

            /*!
             * @brief This function returns a reference to member length
             * @return Reference to member length
             */
            eProsima_user_DllExport double& length();

            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    double _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport double width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport double& width();

            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    double _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport double height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport double& height();

            /*!
             * @brief This function copies the value in member polygon_point
             * @param _polygon_point New value to be copied in member polygon_point
             */
            eProsima_user_DllExport void polygon_point(
                    const std::vector<geometry_msgs::msg::Vector3>& _polygon_point);

            /*!
             * @brief This function moves the value in member polygon_point
             * @param _polygon_point New value to be moved in member polygon_point
             */
            eProsima_user_DllExport void polygon_point(
                    std::vector<geometry_msgs::msg::Vector3>&& _polygon_point);

            /*!
             * @brief This function returns a constant reference to member polygon_point
             * @return Constant reference to member polygon_point
             */
            eProsima_user_DllExport const std::vector<geometry_msgs::msg::Vector3>& polygon_point() const;

            /*!
             * @brief This function returns a reference to member polygon_point
             * @return Reference to member polygon_point
             */
            eProsima_user_DllExport std::vector<geometry_msgs::msg::Vector3>& polygon_point();
            /*!
             * @brief This function sets a value in member tracking_time
             * @param _tracking_time New value for member tracking_time
             */
            eProsima_user_DllExport void tracking_time(
                    double _tracking_time);

            /*!
             * @brief This function returns the value of member tracking_time
             * @return Value of member tracking_time
             */
            eProsima_user_DllExport double tracking_time() const;

            /*!
             * @brief This function returns a reference to member tracking_time
             * @return Reference to member tracking_time
             */
            eProsima_user_DllExport double& tracking_time();

            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            eProsima_user_DllExport void type(
                    uint8_t _type);

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            eProsima_user_DllExport uint8_t type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            eProsima_user_DllExport uint8_t& type();

            /*!
             * @brief This function sets a value in member sub_type
             * @param _sub_type New value for member sub_type
             */
            eProsima_user_DllExport void sub_type(
                    uint8_t _sub_type);

            /*!
             * @brief This function returns the value of member sub_type
             * @return Value of member sub_type
             */
            eProsima_user_DllExport uint8_t sub_type() const;

            /*!
             * @brief This function returns a reference to member sub_type
             * @return Reference to member sub_type
             */
            eProsima_user_DllExport uint8_t& sub_type();

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(
                    double _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport double timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport double& timestamp();

            /*!
             * @brief This function copies the value in member acceleration
             * @param _acceleration New value to be copied in member acceleration
             */
            eProsima_user_DllExport void acceleration(
                    const geometry_msgs::msg::Vector3& _acceleration);

            /*!
             * @brief This function moves the value in member acceleration
             * @param _acceleration New value to be moved in member acceleration
             */
            eProsima_user_DllExport void acceleration(
                    geometry_msgs::msg::Vector3&& _acceleration);

            /*!
             * @brief This function returns a constant reference to member acceleration
             * @return Constant reference to member acceleration
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& acceleration() const;

            /*!
             * @brief This function returns a reference to member acceleration
             * @return Reference to member acceleration
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& acceleration();
            /*!
             * @brief This function copies the value in member anchor_point
             * @param _anchor_point New value to be copied in member anchor_point
             */
            eProsima_user_DllExport void anchor_point(
                    const geometry_msgs::msg::Vector3& _anchor_point);

            /*!
             * @brief This function moves the value in member anchor_point
             * @param _anchor_point New value to be moved in member anchor_point
             */
            eProsima_user_DllExport void anchor_point(
                    geometry_msgs::msg::Vector3&& _anchor_point);

            /*!
             * @brief This function returns a constant reference to member anchor_point
             * @return Constant reference to member anchor_point
             */
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& anchor_point() const;

            /*!
             * @brief This function returns a reference to member anchor_point
             * @return Reference to member anchor_point
             */
            eProsima_user_DllExport geometry_msgs::msg::Vector3& anchor_point();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_msgs::msg::CarlaPerceptionObstacle& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            int32_t m_id;
            geometry_msgs::msg::Vector3 m_position;
            double m_yaw;
            geometry_msgs::msg::Vector3 m_velocity;
            double m_length;
            double m_width;
            double m_height;
            std::vector<geometry_msgs::msg::Vector3> m_polygon_point;
            double m_tracking_time;
            uint8_t m_type;
            uint8_t m_sub_type;
            double m_timestamp;
            geometry_msgs::msg::Vector3 m_acceleration;
            geometry_msgs::msg::Vector3 m_anchor_point;

        };
    } // namespace msg
} // namespace carla_msgs

#endif // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLAPERCEPTIONOBSTACLE_H_


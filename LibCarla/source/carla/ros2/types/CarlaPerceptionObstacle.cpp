// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaPerceptionObstacle.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaPerceptionObstacle.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define carla_msgs_msg_CarlaPerceptionObstacle_max_cdr_typesize 2568ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaPerceptionObstacle_max_key_cdr_typesize 0ULL;























carla_msgs::msg::CarlaPerceptionObstacle::CarlaPerceptionObstacle()
{
    // long m_id
    m_id = 0;
    // geometry_msgs::msg::Vector3 m_position

    // double m_yaw
    m_yaw = 0.0;
    // geometry_msgs::msg::Vector3 m_velocity

    // double m_length
    m_length = 0.0;
    // double m_width
    m_width = 0.0;
    // double m_height
    m_height = 0.0;
    // sequence<geometry_msgs::msg::Vector3> m_polygon_point

    // double m_tracking_time
    m_tracking_time = 0.0;
    // uint8 m_type
    m_type = 0;
    // uint8 m_sub_type
    m_sub_type = 0;
    // double m_timestamp
    m_timestamp = 0.0;
    // geometry_msgs::msg::Vector3 m_acceleration

    // geometry_msgs::msg::Vector3 m_anchor_point


}

carla_msgs::msg::CarlaPerceptionObstacle::~CarlaPerceptionObstacle()
{














}

carla_msgs::msg::CarlaPerceptionObstacle::CarlaPerceptionObstacle(
        const CarlaPerceptionObstacle& x)
{
    m_id = x.m_id;
    m_position = x.m_position;
    m_yaw = x.m_yaw;
    m_velocity = x.m_velocity;
    m_length = x.m_length;
    m_width = x.m_width;
    m_height = x.m_height;
    m_polygon_point = x.m_polygon_point;
    m_tracking_time = x.m_tracking_time;
    m_type = x.m_type;
    m_sub_type = x.m_sub_type;
    m_timestamp = x.m_timestamp;
    m_acceleration = x.m_acceleration;
    m_anchor_point = x.m_anchor_point;
}

carla_msgs::msg::CarlaPerceptionObstacle::CarlaPerceptionObstacle(
        CarlaPerceptionObstacle&& x) noexcept 
{
    m_id = x.m_id;
    m_position = std::move(x.m_position);
    m_yaw = x.m_yaw;
    m_velocity = std::move(x.m_velocity);
    m_length = x.m_length;
    m_width = x.m_width;
    m_height = x.m_height;
    m_polygon_point = std::move(x.m_polygon_point);
    m_tracking_time = x.m_tracking_time;
    m_type = x.m_type;
    m_sub_type = x.m_sub_type;
    m_timestamp = x.m_timestamp;
    m_acceleration = std::move(x.m_acceleration);
    m_anchor_point = std::move(x.m_anchor_point);
}

carla_msgs::msg::CarlaPerceptionObstacle& carla_msgs::msg::CarlaPerceptionObstacle::operator =(
        const CarlaPerceptionObstacle& x)
{

    m_id = x.m_id;
    m_position = x.m_position;
    m_yaw = x.m_yaw;
    m_velocity = x.m_velocity;
    m_length = x.m_length;
    m_width = x.m_width;
    m_height = x.m_height;
    m_polygon_point = x.m_polygon_point;
    m_tracking_time = x.m_tracking_time;
    m_type = x.m_type;
    m_sub_type = x.m_sub_type;
    m_timestamp = x.m_timestamp;
    m_acceleration = x.m_acceleration;
    m_anchor_point = x.m_anchor_point;

    return *this;
}

carla_msgs::msg::CarlaPerceptionObstacle& carla_msgs::msg::CarlaPerceptionObstacle::operator =(
        CarlaPerceptionObstacle&& x) noexcept
{

    m_id = x.m_id;
    m_position = std::move(x.m_position);
    m_yaw = x.m_yaw;
    m_velocity = std::move(x.m_velocity);
    m_length = x.m_length;
    m_width = x.m_width;
    m_height = x.m_height;
    m_polygon_point = std::move(x.m_polygon_point);
    m_tracking_time = x.m_tracking_time;
    m_type = x.m_type;
    m_sub_type = x.m_sub_type;
    m_timestamp = x.m_timestamp;
    m_acceleration = std::move(x.m_acceleration);
    m_anchor_point = std::move(x.m_anchor_point);

    return *this;
}

bool carla_msgs::msg::CarlaPerceptionObstacle::operator ==(
        const CarlaPerceptionObstacle& x) const
{

    return (m_id == x.m_id && m_position == x.m_position && m_yaw == x.m_yaw && m_velocity == x.m_velocity && m_length == x.m_length && m_width == x.m_width && m_height == x.m_height && m_polygon_point == x.m_polygon_point && m_tracking_time == x.m_tracking_time && m_type == x.m_type && m_sub_type == x.m_sub_type && m_timestamp == x.m_timestamp && m_acceleration == x.m_acceleration && m_anchor_point == x.m_anchor_point);
}

bool carla_msgs::msg::CarlaPerceptionObstacle::operator !=(
        const CarlaPerceptionObstacle& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaPerceptionObstacle::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaPerceptionObstacle_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaPerceptionObstacle::getCdrSerializedSize(
        const carla_msgs::msg::CarlaPerceptionObstacle& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.position(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.velocity(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.polygon_point().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.polygon_point().at(a), current_alignment);}

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.acceleration(), current_alignment);
    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.anchor_point(), current_alignment);

    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaPerceptionObstacle::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_position;
    scdr << m_yaw;
    scdr << m_velocity;
    scdr << m_length;
    scdr << m_width;
    scdr << m_height;
    scdr << m_polygon_point;
    scdr << m_tracking_time;
    scdr << m_type;
    scdr << m_sub_type;
    scdr << m_timestamp;
    scdr << m_acceleration;
    scdr << m_anchor_point;

}

void carla_msgs::msg::CarlaPerceptionObstacle::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_position;
    dcdr >> m_yaw;
    dcdr >> m_velocity;
    dcdr >> m_length;
    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_polygon_point;
    dcdr >> m_tracking_time;
    dcdr >> m_type;
    dcdr >> m_sub_type;
    dcdr >> m_timestamp;
    dcdr >> m_acceleration;
    dcdr >> m_anchor_point;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void carla_msgs::msg::CarlaPerceptionObstacle::id(
        int32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
int32_t carla_msgs::msg::CarlaPerceptionObstacle::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
int32_t& carla_msgs::msg::CarlaPerceptionObstacle::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void carla_msgs::msg::CarlaPerceptionObstacle::position(
        const geometry_msgs::msg::Vector3& _position)
{
    m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void carla_msgs::msg::CarlaPerceptionObstacle::position(
        geometry_msgs::msg::Vector3&& _position)
{
    m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::position()
{
    return m_position;
}
/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void carla_msgs::msg::CarlaPerceptionObstacle::yaw(
        double _yaw)
{
    m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
double carla_msgs::msg::CarlaPerceptionObstacle::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::yaw()
{
    return m_yaw;
}

/*!
 * @brief This function copies the value in member velocity
 * @param _velocity New value to be copied in member velocity
 */
void carla_msgs::msg::CarlaPerceptionObstacle::velocity(
        const geometry_msgs::msg::Vector3& _velocity)
{
    m_velocity = _velocity;
}

/*!
 * @brief This function moves the value in member velocity
 * @param _velocity New value to be moved in member velocity
 */
void carla_msgs::msg::CarlaPerceptionObstacle::velocity(
        geometry_msgs::msg::Vector3&& _velocity)
{
    m_velocity = std::move(_velocity);
}

/*!
 * @brief This function returns a constant reference to member velocity
 * @return Constant reference to member velocity
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::velocity()
{
    return m_velocity;
}
/*!
 * @brief This function sets a value in member length
 * @param _length New value for member length
 */
void carla_msgs::msg::CarlaPerceptionObstacle::length(
        double _length)
{
    m_length = _length;
}

/*!
 * @brief This function returns the value of member length
 * @return Value of member length
 */
double carla_msgs::msg::CarlaPerceptionObstacle::length() const
{
    return m_length;
}

/*!
 * @brief This function returns a reference to member length
 * @return Reference to member length
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::length()
{
    return m_length;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void carla_msgs::msg::CarlaPerceptionObstacle::width(
        double _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
double carla_msgs::msg::CarlaPerceptionObstacle::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void carla_msgs::msg::CarlaPerceptionObstacle::height(
        double _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
double carla_msgs::msg::CarlaPerceptionObstacle::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::height()
{
    return m_height;
}

/*!
 * @brief This function copies the value in member polygon_point
 * @param _polygon_point New value to be copied in member polygon_point
 */
void carla_msgs::msg::CarlaPerceptionObstacle::polygon_point(
        const std::vector<geometry_msgs::msg::Vector3>& _polygon_point)
{
    m_polygon_point = _polygon_point;
}

/*!
 * @brief This function moves the value in member polygon_point
 * @param _polygon_point New value to be moved in member polygon_point
 */
void carla_msgs::msg::CarlaPerceptionObstacle::polygon_point(
        std::vector<geometry_msgs::msg::Vector3>&& _polygon_point)
{
    m_polygon_point = std::move(_polygon_point);
}

/*!
 * @brief This function returns a constant reference to member polygon_point
 * @return Constant reference to member polygon_point
 */
const std::vector<geometry_msgs::msg::Vector3>& carla_msgs::msg::CarlaPerceptionObstacle::polygon_point() const
{
    return m_polygon_point;
}

/*!
 * @brief This function returns a reference to member polygon_point
 * @return Reference to member polygon_point
 */
std::vector<geometry_msgs::msg::Vector3>& carla_msgs::msg::CarlaPerceptionObstacle::polygon_point()
{
    return m_polygon_point;
}
/*!
 * @brief This function sets a value in member tracking_time
 * @param _tracking_time New value for member tracking_time
 */
void carla_msgs::msg::CarlaPerceptionObstacle::tracking_time(
        double _tracking_time)
{
    m_tracking_time = _tracking_time;
}

/*!
 * @brief This function returns the value of member tracking_time
 * @return Value of member tracking_time
 */
double carla_msgs::msg::CarlaPerceptionObstacle::tracking_time() const
{
    return m_tracking_time;
}

/*!
 * @brief This function returns a reference to member tracking_time
 * @return Reference to member tracking_time
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::tracking_time()
{
    return m_tracking_time;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void carla_msgs::msg::CarlaPerceptionObstacle::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t carla_msgs::msg::CarlaPerceptionObstacle::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& carla_msgs::msg::CarlaPerceptionObstacle::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member sub_type
 * @param _sub_type New value for member sub_type
 */
void carla_msgs::msg::CarlaPerceptionObstacle::sub_type(
        uint8_t _sub_type)
{
    m_sub_type = _sub_type;
}

/*!
 * @brief This function returns the value of member sub_type
 * @return Value of member sub_type
 */
uint8_t carla_msgs::msg::CarlaPerceptionObstacle::sub_type() const
{
    return m_sub_type;
}

/*!
 * @brief This function returns a reference to member sub_type
 * @return Reference to member sub_type
 */
uint8_t& carla_msgs::msg::CarlaPerceptionObstacle::sub_type()
{
    return m_sub_type;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void carla_msgs::msg::CarlaPerceptionObstacle::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double carla_msgs::msg::CarlaPerceptionObstacle::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& carla_msgs::msg::CarlaPerceptionObstacle::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member acceleration
 * @param _acceleration New value to be copied in member acceleration
 */
void carla_msgs::msg::CarlaPerceptionObstacle::acceleration(
        const geometry_msgs::msg::Vector3& _acceleration)
{
    m_acceleration = _acceleration;
}

/*!
 * @brief This function moves the value in member acceleration
 * @param _acceleration New value to be moved in member acceleration
 */
void carla_msgs::msg::CarlaPerceptionObstacle::acceleration(
        geometry_msgs::msg::Vector3&& _acceleration)
{
    m_acceleration = std::move(_acceleration);
}

/*!
 * @brief This function returns a constant reference to member acceleration
 * @return Constant reference to member acceleration
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::acceleration() const
{
    return m_acceleration;
}

/*!
 * @brief This function returns a reference to member acceleration
 * @return Reference to member acceleration
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::acceleration()
{
    return m_acceleration;
}
/*!
 * @brief This function copies the value in member anchor_point
 * @param _anchor_point New value to be copied in member anchor_point
 */
void carla_msgs::msg::CarlaPerceptionObstacle::anchor_point(
        const geometry_msgs::msg::Vector3& _anchor_point)
{
    m_anchor_point = _anchor_point;
}

/*!
 * @brief This function moves the value in member anchor_point
 * @param _anchor_point New value to be moved in member anchor_point
 */
void carla_msgs::msg::CarlaPerceptionObstacle::anchor_point(
        geometry_msgs::msg::Vector3&& _anchor_point)
{
    m_anchor_point = std::move(_anchor_point);
}

/*!
 * @brief This function returns a constant reference to member anchor_point
 * @return Constant reference to member anchor_point
 */
const geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::anchor_point() const
{
    return m_anchor_point;
}

/*!
 * @brief This function returns a reference to member anchor_point
 * @return Reference to member anchor_point
 */
geometry_msgs::msg::Vector3& carla_msgs::msg::CarlaPerceptionObstacle::anchor_point()
{
    return m_anchor_point;
}


size_t carla_msgs::msg::CarlaPerceptionObstacle::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaPerceptionObstacle_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaPerceptionObstacle::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaPerceptionObstacle::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}




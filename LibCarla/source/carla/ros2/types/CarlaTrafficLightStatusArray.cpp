// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaTrafficLightStatusArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaTrafficLightStatusArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define carla_msgs_msg_CarlaTrafficLightStatusArray_max_cdr_typesize 29066ULL;
#define carla_msgs_msg_CarlaTrafficLightStatus_max_cdr_typesize 281ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaTrafficLightStatusArray_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaTrafficLightStatus_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

carla_msgs::msg::CarlaTrafficLightStatusArray::CarlaTrafficLightStatusArray()
{
    // std_msgs::msg::Header m_header

    // sequence<carla_msgs::msg::CarlaTrafficLightStatus> m_traffic_light

    // boolean m_contain_lights
    m_contain_lights = false;

}

carla_msgs::msg::CarlaTrafficLightStatusArray::~CarlaTrafficLightStatusArray()
{



}

carla_msgs::msg::CarlaTrafficLightStatusArray::CarlaTrafficLightStatusArray(
        const CarlaTrafficLightStatusArray& x)
{
    m_header = x.m_header;
    m_traffic_light = x.m_traffic_light;
    m_contain_lights = x.m_contain_lights;
}

carla_msgs::msg::CarlaTrafficLightStatusArray::CarlaTrafficLightStatusArray(
        CarlaTrafficLightStatusArray&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_traffic_light = std::move(x.m_traffic_light);
    m_contain_lights = x.m_contain_lights;
}

carla_msgs::msg::CarlaTrafficLightStatusArray& carla_msgs::msg::CarlaTrafficLightStatusArray::operator =(
        const CarlaTrafficLightStatusArray& x)
{

    m_header = x.m_header;
    m_traffic_light = x.m_traffic_light;
    m_contain_lights = x.m_contain_lights;

    return *this;
}

carla_msgs::msg::CarlaTrafficLightStatusArray& carla_msgs::msg::CarlaTrafficLightStatusArray::operator =(
        CarlaTrafficLightStatusArray&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_traffic_light = std::move(x.m_traffic_light);
    m_contain_lights = x.m_contain_lights;

    return *this;
}

bool carla_msgs::msg::CarlaTrafficLightStatusArray::operator ==(
        const CarlaTrafficLightStatusArray& x) const
{

    return (m_header == x.m_header && m_traffic_light == x.m_traffic_light && m_contain_lights == x.m_contain_lights);
}

bool carla_msgs::msg::CarlaTrafficLightStatusArray::operator !=(
        const CarlaTrafficLightStatusArray& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaTrafficLightStatusArray::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaTrafficLightStatusArray_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaTrafficLightStatusArray::getCdrSerializedSize(
        const carla_msgs::msg::CarlaTrafficLightStatusArray& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.traffic_light().size(); ++a)
    {
        current_alignment += carla_msgs::msg::CarlaTrafficLightStatus::getCdrSerializedSize(data.traffic_light().at(a), current_alignment);}

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaTrafficLightStatusArray::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_traffic_light;
    scdr << m_contain_lights;

}

void carla_msgs::msg::CarlaTrafficLightStatusArray::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_traffic_light;
    dcdr >> m_contain_lights;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaTrafficLightStatusArray::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaTrafficLightStatusArray::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaTrafficLightStatusArray::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaTrafficLightStatusArray::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member traffic_light
 * @param _traffic_light New value to be copied in member traffic_light
 */
void carla_msgs::msg::CarlaTrafficLightStatusArray::traffic_light(
        const std::vector<carla_msgs::msg::CarlaTrafficLightStatus>& _traffic_light)
{
    m_traffic_light = _traffic_light;
}

/*!
 * @brief This function moves the value in member traffic_light
 * @param _traffic_light New value to be moved in member traffic_light
 */
void carla_msgs::msg::CarlaTrafficLightStatusArray::traffic_light(
        std::vector<carla_msgs::msg::CarlaTrafficLightStatus>&& _traffic_light)
{
    m_traffic_light = std::move(_traffic_light);
}

/*!
 * @brief This function returns a constant reference to member traffic_light
 * @return Constant reference to member traffic_light
 */
const std::vector<carla_msgs::msg::CarlaTrafficLightStatus>& carla_msgs::msg::CarlaTrafficLightStatusArray::traffic_light() const
{
    return m_traffic_light;
}

/*!
 * @brief This function returns a reference to member traffic_light
 * @return Reference to member traffic_light
 */
std::vector<carla_msgs::msg::CarlaTrafficLightStatus>& carla_msgs::msg::CarlaTrafficLightStatusArray::traffic_light()
{
    return m_traffic_light;
}
/*!
 * @brief This function sets a value in member contain_lights
 * @param _contain_lights New value for member contain_lights
 */
void carla_msgs::msg::CarlaTrafficLightStatusArray::contain_lights(
        bool _contain_lights)
{
    m_contain_lights = _contain_lights;
}

/*!
 * @brief This function returns the value of member contain_lights
 * @return Value of member contain_lights
 */
bool carla_msgs::msg::CarlaTrafficLightStatusArray::contain_lights() const
{
    return m_contain_lights;
}

/*!
 * @brief This function returns a reference to member contain_lights
 * @return Reference to member contain_lights
 */
bool& carla_msgs::msg::CarlaTrafficLightStatusArray::contain_lights()
{
    return m_contain_lights;
}



size_t carla_msgs::msg::CarlaTrafficLightStatusArray::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaTrafficLightStatusArray_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaTrafficLightStatusArray::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaTrafficLightStatusArray::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



